package org.stellar.kotlinwalletsdk.utils

import com.google.gson.Gson
import java.io.IOException
import java.util.concurrent.TimeUnit
import okhttp3.MediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody
import okhttp3.Response

open class SepClient {
  private val APPLICATION_JSON_CHARSET_UTF_8 = "application/json; charset=utf-8"
  private val TYPE_JSON: MediaType = MediaType.parse(APPLICATION_JSON_CHARSET_UTF_8)!!

  companion object {
    val gson: Gson = GsonUtils.instance!!
    val client: OkHttpClient =
      OkHttpClient.Builder()
        .connectTimeout(10, TimeUnit.MINUTES)
        .readTimeout(10, TimeUnit.MINUTES)
        .writeTimeout(10, TimeUnit.MINUTES)
        .callTimeout(10, TimeUnit.MINUTES)
        .build()
  }

  fun httpGet(url: String, jwt: String? = null): String? {
    var builder = Request.Builder().url(url).header("Content-Type", "application/json").get()
    if (jwt != null) {
      builder = builder.header("Authorization", "Bearer $jwt")
    }
    val request = builder.build()

    val response = client.newCall(request).execute()
    return handleResponse(response)
  }

  fun httpPost(url: String, requestBody: Map<String, Any>, jwt: String? = null): String? {
    val requestBodyStr = RequestBody.create(TYPE_JSON, gson.toJson(requestBody))

    var builder =
      Request.Builder().url(url).header("Content-Type", "application/json").post(requestBodyStr)

    if (jwt != null) {
      builder = builder.header("Authorization", "Bearer $jwt")
    }
    val request = builder.build()

    val response = client.newCall(request).execute()
    return handleResponse(response)
  }

  fun handleResponse(response: Response): String? {
    if (!response.isSuccessful) throw IOException("Request failed: $response")

    return response.body().toString()
  }
}
